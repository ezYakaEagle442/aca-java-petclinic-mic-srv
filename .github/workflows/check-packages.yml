name: Check the GitHub Packages
# You need at least read:packages scope
on:
  workflow_dispatch:

env:
  
  AZ_CLI_VERSION: 2.40.0
  DEPLOYMENT_VERSION: 2.6.6

  GH_API: api.github.com/user/packages/maven

  # ==== APPS ====:
  API_GATEWAY: api-gateway
  ADMIN_SERVER: admin-server
  CUSTOMERS_SERVICE: customers-service
  VETS_SERVICE: vets-service
  VISITS_SERVICE: visits-service

  CONFIG_SERVER: config-server
  DISCOVERY_SERVER: discovery-server

  PRJ_PREFIX: aca-spring-petclinic

jobs:

  check-pkg:
    permissions: 
      contents: read
      packages: read

    runs-on: ubuntu-latest
    steps:
    - name: Set Base environment variables
      run: |
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV

        echo "API_GATEWAY_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "ADMIN_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "CONFIG_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VETS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VISITS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV

        
        echo "ADMIN_SERVER_GROUP_ID=org.springframework.samples.petclinic.admin" >> $GITHUB_ENV
        echo "ADMIN_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}" >> $GITHUB_ENV

        echo "API_GATEWAY_GROUP_ID=org.springframework.samples.petclinic.api" >> $GITHUB_ENV
        echo "API_GATEWAY_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}" >> $GITHUB_ENV

        echo "CONFIG_SERVER_GROUP_ID=org.springframework.samples.petclinic.config" >> $GITHUB_ENV
        echo "CONFIG_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}" >> $GITHUB_ENV

        echo "CUSTOMERS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.client" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}" >> $GITHUB_ENV

        echo "DISCOVERY_SERVER_GROUP_ID=org.springframework.samples.petclinic.discovery" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}" >> $GITHUB_ENV

        echo "VETS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.vets" >> $GITHUB_ENV
        echo "VETS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}" >> $GITHUB_ENV

        echo "VISITS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.visits" >> $GITHUB_ENV
        echo "VISITS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}" >> $GITHUB_ENV

        echo "GH_WORKSPACE=${{ github.workspace }}" >> $GITHUB_ENV # "/github/workspace"
      shell: bash

    # Variables in the env map cannot be defined in terms of other variables in the map
    - name: Set dependent environment variables
      run: |
        # ==== JARS ====: PWD already in /home/runner/work/azure-spring-apps-petclinic-mic-srv >> $GITHUB_ENV
        echo "API_GATEWAY_JAR=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}/target/$API_GATEWAY_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "ADMIN_SERVER_JAR=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}/target/$ADMIN_SERVER_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "CONFIG_SERVER_JAR=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}/target/$CONFIG_SERVER_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_JAR=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}/target/$CUSTOMERS_SERVICE_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_JAR=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}/target/$DISCOVERY_SERVER_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "VETS_SERVICE_JAR=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}/target/$VETS_SERVICE_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "VISITS_SERVICE_JAR=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}/target/$VISITS_SERVICE_JAR_ARTIFACT" >> $GITHUB_ENV

        echo "API_GATEWAY_PACKAGE_PATH=$GH_WORKSPACE/${{ env.API_GATEWAY }}/${{ env.API_GATEWAY_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "ADMIN_SERVER_PACKAGE_PATH=$GH_WORKSPACE/${{ env.ADMIN_SERVER }}/${{ env.ADMIN_SERVER_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "CONFIG_SERVER_PACKAGE_PATH=$GH_WORKSPACE/${{ env.CONFIG_SERVER }}/${{ env.CONFIG_SERVER_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_PACKAGE_PATH=$GH_WORKSPACE/${{ env.CUSTOMERS_SERVICE }}/${{ env.CUSTOMERS_SERVICE_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_PACKAGE_PATH=$GH_WORKSPACE/${{ env.DISCOVERY_SERVER }}/${{ env.DISCOVERY_SERVER_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "VETS_SERVICE_PACKAGE_PATH=$GH_WORKSPACE/${{ env.VETS_SERVICE }}/${{ env.VETS_SERVICE_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "VISITS_SERVICE_PACKAGE_PATH=$GH_WORKSPACE/${{ env.VISITS_SERVICE }}/${{ env.VISITS_SERVICE_JAR_ARTIFACT }}" >> $GITHUB_ENV

        echo "ADMIN_SERVER_API_URL=https://$GH_API/$ADMIN_SERVER_GROUP_ID.$ADMIN_SERVER_ARTIFACT_ID" >> $GITHUB_ENV
        echo "API_GATEWAY_API_URL=https://$GH_API/$API_GATEWAY_GROUP_ID.$API_GATEWAY_ARTIFACT_ID" >> $GITHUB_ENV
        echo "CONFIG_SERVER_API_URL=https://$GH_API/$CONFIG_SERVER_GROUP_ID.$CONFIG_SERVER_ARTIFACT_ID" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_API_URL=https://$GH_API/$CUSTOMERS_SERVICE_GROUP_ID.$CUSTOMERS_SERVICE_ARTIFACT_ID" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_API_URL=https://$GH_API/$DISCOVERY_SERVER_GROUP_ID.$DISCOVERY_SERVER_ARTIFACT_ID" >> $GITHUB_ENV
        echo "VETS_SERVICE_API_URL=https://$GH_API/$VETS_SERVICE_GROUP_ID.$VETS_SERVICE_ARTIFACT_ID" >> $GITHUB_ENV
        echo "VISITS_SERVICE_API_URL=https://$GH_API/$VISITS_SERVICE_GROUP_ID.$VISITS_SERVICE_ARTIFACT_ID" >> $GITHUB_ENV
      shell: bash


    - name: Download Admin-Server GH Package
      run: |
        curl ${{ env.ADMIN_SERVER_API_URL }} -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json"
        PKG_VER_ID=$(curl ${{ env.ADMIN_SERVER_API_URL }} -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json"  | jq .[0].id)
        PKG_HTML_URL=$(curl ${{ env.ADMIN_SERVER_API_URL }}/$PKG_VER_ID -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" | jq -r .html_url)

        echo "PKG_VER_ID=$PKG_VER_ID"
        echo "PKG_HTML_URL=$PKG_HTML_URL"

        pwd
        mkdir $GH_WORKSPACE/${{ env.ADMIN_SERVER }}
        ls -al
        ls -al ${{ github.workspace }}

        curl -u username:${{ env.GHA_PAT }} $PKG_HTML_URL | grep "https://github-registry-files.githubusercontent.com" > PKG_HTML_FILE.txt

        sed -i 's/                <a href=\"//g' PKG_HTML_FILE.txt
        sed -i 's/\" class=\"d-flex\">//g' PKG_HTML_FILE.txt
        sed -i 's/\&amp\;/\&/g' PKG_HTML_FILE.txt

        PKG_URL_LOCAL_PATH="pkg_url.txt"
        cat PKG_HTML_FILE.txt |
        while IFS= read -r line
        do
            echo "line ... |$line|"
            echo "$line" > $PKG_URL_LOCAL_PATH
            # Content-Type: application/octet-stream not application/java-archive (or application/x-java-archive | application/x-jar)
            wget $line -O ${{ env.ADMIN_SERVER_PACKAGE_PATH }} --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
            # Quick & dirty, the first item is the jar file
            break ;
        done
        
        ls -al $GH_WORKSPACE/${{ env.ADMIN_SERVER }}

      shell: bash
      env:
        GHA_PAT: ${{ secrets.PKG_PAT }}


    # As the Deploy Job runs now in a different Workflow than the Build Job, the data workspace is not shared anymore
    # You need to download the Artifacts from the GH Packages
    # https://docs.github.com/en/rest/reference/packages#get-a-package-for-an-organization
    # generate a PAT : https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
    # /!\ IMPORTANT: If package_type is not container, your token must also include the repo scope.
    # https://gist.github.com/maxim/6e15aa45ba010ab030c4
    # local test with: curl -u username:<Your PAT Token> -H "Accept: application/vnd.github.v3+json" https://api.github.com
    # curl -u username:<Your PAT Token> -H "Accept: application/vnd.github.v3+json" https://api.github.com/user/packages/maven/org.springframework.samples.petclinic.admin.spring-petclinic-admin-server/versions
    # curl -u username:<Your PAT Token> -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/ezYakaEagle442/azure-spring-apps-petclinic-mic-srv/releases

    # TODO: replace the curl workaround with https://gist.github.com/tgrall/25f82f69bfdbc630bfc7a2e4c3acd39d 
    # https://github.com/octokit/graphql-action

    # Can be tested at https://docs.github.com/en/graphql/overview/explorer
    - name: Get Admin-Server GH Package URL
      uses: octokit/graphql-action@v2.2.22
      id: get_latest_pkg_admin
      with:
        query: |
          query packages($owner:String!,$repo:String!) {
            repository(owner:${{ env.OWNER }},name:${{ env.REPO }}) {
              # /!\ '_' dash char. NOT supported in org.springframework.samples.petclinic.admin.${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}
              packages(first: 10, packageType: MAVEN, names: "org.springframework.samples.petclinic.admin.aca-spring-petclinic-admin-server") {
                edges {
                  node {
                    id
                    name
                    packageType
                    versions(first: 100) {
                      nodes {
                        id
                        version
                        files(first: 10) {
                          nodes {
                            name
                            url
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        # owner: ${{ github.repository_owner }} # ${{ github.event.repository.owner.name }}
        # repo: ${{ github.event.repository.name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # GITHUB_TOKEN: ${{ secrets.PKG_PAT }}
        OWNER: ${{ github.repository_owner }} # # ${{ github.event.repository.owner.name }} 
        REPO: ${{ github.event.repository.name }}

    - run: |
        # https://www.baeldung.com/linux/jq-command-json
        echo "latest release: ${{ steps.get_latest_pkg_admin.outputs.data }}"
        # .repository.packages.edges[0].node.versions.nodes["version": "2.6.6"].files.nodes[0].url
        jarURL=${{ steps.get_latest_pkg_admin.outputs.data }} | jq '.repository.packages.edges[0].node.versions.nodes[] | select(.name|test("^.*\.jar$")) | .url'
        shaURL=${{ steps.get_latest_pkg_admin.outputs.data }} | jq '.repository.packages.edges[0].node.versions.nodes[] | select(.name|test("^.*\.jar\.sha1$")) | .url'
        md5URL=${{ steps.get_latest_pkg_admin.outputs.data }} | jq '.repository.packages.edges[0].node.versions.nodes[] | select(.name|test("^.*\.jar\.md5$")) | .url'
        pomURL=${{ steps.get_latest_pkg_admin.outputs.data }} | jq '.repository.packages.edges[0].node.versions.nodes[] | select(.name|test("^.*\.pom$")) | .url'
        pomSHA=${{ steps.get_latest_pkg_admin.outputs.data }} | jq '.repository.packages.edges[0].node.versions.nodes[] | select(.name|test("^.*\.pom\.sha1$")) | .url'
        pomMD5=${{ steps.get_latest_pkg_admin.outputs.data }} | jq '.repository.packages.edges[0].node.versions.nodes[] | select(.name|test("^.*\.pom\.md5$")) | .url'

        echo jarURL=$jarURL
        echo shaURL=$shaURL
        echo md5URL=$md5URL
        echo pomURL=$pomURL
        echo pomSHA=$pomSHA
        echo pomMD5=$pomMD5

        # Content-Type: application/octet-stream not application/java-archive (or application/x-java-archive | application/x-jar)
        wget jarURL -O $ADMIN_SERVER_JAR_ARTIFACT --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
        mkdir spring-petclinic-admin-server/target
        cp $ADMIN_SERVER_JAR_ARTIFACT spring-petclinic-admin-server/target/
        pwd
        ls -al
        mkdir $GH_WORKSPACE/${{ env.ADMIN_SERVER }}
        ls -al

      env:
        GHA_PAT: ${{ secrets.PKG_PAT }}
