name: Deploy ACA Apps with Azure Bicep

env:
  APP_NAME: petcliaca
  LOCATION: francecentral # westeurope
  RG_KV: rg-iac-kv29 # RG where to deploy KV
  RG_APP: rg-iac-aca-petclinic-mic-srv # RG where to deploy the other Azure services: ACA, ACA Env., MySQL, etc.
  
  ACA_ENV_NAME: aca-env-pub # ACA Environment name. Ex 'aca-env-pub' or 'aca-env-corp' when deployed to your VNet
  DEPLOY_TO_VNET: false

  KV_NAME: kv-petcliaca29 # The name of the KV, must be UNIQUE. A vault name must be between 3-24 alphanumeric characters
  SET_KV_ACCESS_POLICIES: false # let it to false
  SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT: https:/kv-petcliaca29.vault.azure.net

  AZURE_CONTAINER_REGISTRY: acrpetcliaca # The name of the ACR, must be UNIQUE. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
  REGISTRY_URL: acrpetcliaca.azurecr.io  # set this to the URL of your registry
  REPOSITORY: petclinic                  # set this to your ACR repository


  # ==== APPS ====
  API_GATEWAY: api-gateway
  ADMIN_SERVER: admin-server
  CUSTOMERS_SERVICE: customers-service
  VETS_SERVICE: vets-service
  VISITS_SERVICE: visits-service

  CONFIG_SERVER: config-server
  DISCOVERY_SERVER: discovery-server

  # ==== Secrets ====
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # ==== Versions ====
  DEPLOYMENT_VERSION: 2.6.13
  AZ_CLI_VERSION: 2.44.1
  JAVA_VERSION: 11

on:
  workflow_dispatch:
    inputs: # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
      tag_id:
        description: the Image Tag ID
        required: true
        type: string

# required for https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read
  
jobs:
  deploy-apps:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1.4.6 # https://github.com/marketplace/actions/azure-login
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Azure Container Apps
      run: |
          echo "About to call ACA, roleAssignments and KV Module iac/bicep/petclinic-apps.bicep#284" 
          tag_id=${{ inputs.tag_id }} 
          echo "Image Build tag ID:"$tag_id

          set -euo pipefail
          access_token=$(az account get-access-token --query accessToken -o tsv)
          refresh_token=$(curl https://${{ env.REGISTRY_URL }}/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.REGISTRY_URL }}&access_token=$access_token" | jq -r .refresh_token)
          # docker login ${{ env.REGISTRY_URL }} -u 00000000-0000-0000-0000-000000000000 --password-stdin <<< "$refresh_token"

          acr_usr=$(az deployment group show -g ${{ env.RG_APP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query properties.outputs.acrRegistryUsr.value | tr -d '"')
          acr_pwd=$(az deployment group show -g ${{ env.RG_APP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query properties.outputs.acrRegistryPwd.value | tr -d '"')
          # az acr login --name ${{ env.REGISTRY_URL }} -u $acr_usr -p $acr_pwd
          
          TOKEN=$(az acr login --name  ${{ env.REGISTRY_URL }} --expose-token --output tsv --query accessToken)
          # docker login ${{ env.REGISTRY_URL }} --username 00000000-0000-0000-0000-000000000000 <<< $TOKEN

          az configure --defaults acr=${{ env.AZURE_CONTAINER_REGISTRY }}

          imageNameAdminServer="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.ADMIN_SERVER }}:$tag_id"
          imageNameApiGateway="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.API_GATEWAY }}:$tag_id"
          imageNameDiscoveryServer="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.DISCOVERY_SERVER }}:$tag_id"
          imageNameConfigServer="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.CONFIG_SERVER }}:$tag_id"
          imageNameCustomersService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.CUSTOMERS_SERVICE }}:$tag_id"
          imageNameVetsService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.VETS_SERVICE }}:$tag_id"
          imageNameVisitsService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.VISITS_SERVICE }}:$tag_id"

          echo "imageNameAdminServer= " $imageNameAdminServer
          echo "imageNameApiGateway= " $imageNameApiGateway
          echo "imageNameConfigServer= " $imageNameConfigServer
          echo "imageNameCustomersService= " $imageNameCustomersService
          echo "imageNameVetsService= " $imageNameVetsService
          echo "imageNameVisitsService= " $imageNameVisitsService
          echo "imageNameDiscoveryServer= " $imageNameDiscoveryServer

          az deployment group create --name aca-petclinic-apps -f iac/bicep/petclinic-apps.bicep -g ${{ env.RG_APP }} \
            -p appName=${{ env.APP_NAME }} \
            -p location=${{ env.LOCATION }} \
            -p acrName=${{ env.AZURE_CONTAINER_REGISTRY }} \
            -p acrRepository=${{ env.REPOSITORY }} \
            -p azureContainerAppEnvName=${{ env.ACA_ENV_NAME }} \
            -p kvName=${{ env.KV_NAME }} \
            -p kvRGName=${{ env.RG_KV }} \
            -p deployToVNet=${{ env.DEPLOY_TO_VNET }} \
            -p imageNameAdminServer=$imageNameAdminServer \
            -p imageNameApiGateway=$imageNameApiGateway \
            -p imageNameDiscoveryServer=$imageNameDiscoveryServer \
            -p imageNameConfigServer=$imageNameConfigServer \
            -p imageNameCustomersService=$imageNameCustomersService \
            -p imageNameVetsService=$imageNameVetsService \
            -p imageNameVisitsService=$imageNameVisitsService

      shell: bash

    - name: Configure Diagnostic-Settings
      run: |
          echo "ACA does not yet support diagnostic settings, see https://github.com/microsoft/azure-container-apps/issues/382" 
          
          # az deployment group create --name aca-petclinic-apps -f iac/bicep/modules/aca/diagnostic-settings.bicep -g ${{ env.RG_APP }} \
      shell: bash

    - name: Configure GitHub-Action-Settings
      run: |   
          echo "To be tested ..."       
          # az deployment group create --name aca-petclinic-apps -f iac/bicep/modules/aca/gha-settings.bicep -g ${{ env.RG_APP }} \

      shell: bash

    # security hardening for self-hosted agents: https://github.com/marketplace/actions/azure-login
    # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#hardening-for-self-hosted-runners
    # if the runner is self-hosted which is not github provided it is recommended to manually logout at the end of the workflow as shown below.
    - name: Azure Logout security hardening
      run: |
          az logout
          az cache purge
          az account clear
      shell: bash