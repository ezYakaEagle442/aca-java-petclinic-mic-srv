# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

env:
  AZURE_CONTAINER_REGISTRY: acrpetcliaca # The name of the ACR, must be UNIQUE. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
  REGISTRY_URL: acrpetcliaca.azurecr.io  # set this to the URL of your registry
  REPOSITORY: petclinic                  # set this to your ACR repository
  PROJECT_NAME: petclinic                # set this to your project's name
  KV_NAME: kv-petcliaca42               # The name of the KV, must be UNIQUE. A vault name must be between 3-24 alphanumeric characters
  
  RG_KV: rg-iac-kv42 # RG where to deploy KV
  RG_APP: rg-iac-aca-petclinic-mic-srv # RG where to deploy the other Azure services: ACA, ACA Env., MySQL, etc.

  # ==== APPS ====
  PRJ_PREFIX: aca-spring-petclinic

  API_GATEWAY: api-gateway
  ADMIN_SERVER: admin-server
  CUSTOMERS_SERVICE: customers-service
  VETS_SERVICE: vets-service
  VISITS_SERVICE: visits-service

  CONFIG_SERVER: config-server
  DISCOVERY_SERVER: discovery-server

  # ==== Versions ====
  DEPLOYMENT_VERSION: 2.6.6
  AZ_CLI_VERSION: 2.40.0
  JAVA_VERSION: 11

  # https://github.com/Azure/actions-workflow-samples/blob/master/assets/create-secrets-for-GitHub-workflows.md#consume-secrets-in-your-workflow
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
  # ==== Secrets ====
  credentials: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SPN_ID: ${{ secrets.SPN_ID }}
  SPN_PWD: ${{ secrets.SPN_PWD }}
  
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
on:
  workflow_call:
    outputs:
      workflow_output1:
        description: "The Maven Build job output"
        value: ${{ jobs.maven-build.outputs.tag_id }}

  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
jobs:

  maven-build:
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write    
    steps:

    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
    # /!\ IMPORTANT:  The step that creates or updates the environment variable does not have access to the new value, but all subsequent steps in a job will have access.
    - name: Set Base environment variables
      run: |
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV
        
        echo "API_GATEWAY_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "ADMIN_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "CONFIG_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VETS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VISITS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV

        echo "ADMIN_SERVER_GROUP_ID=org.springframework.samples.petclinic.admin" >> $GITHUB_ENV
        echo "ADMIN_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}" >> $GITHUB_ENV

        echo "API_GATEWAY_GROUP_ID=org.springframework.samples.petclinic.api" >> $GITHUB_ENV
        echo "API_GATEWAY_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}" >> $GITHUB_ENV

        echo "CONFIG_SERVER_GROUP_ID=org.springframework.samples.petclinic.config" >> $GITHUB_ENV
        echo "CONFIG_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}" >> $GITHUB_ENV

        echo "CUSTOMERS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.client" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}" >> $GITHUB_ENV

        echo "DISCOVERY_SERVER_GROUP_ID=org.springframework.samples.petclinic.discovery" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}" >> $GITHUB_ENV

        echo "VETS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.vets" >> $GITHUB_ENV
        echo "VETS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}" >> $GITHUB_ENV

        echo "VISITS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.visits" >> $GITHUB_ENV
        echo "VISITS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}" >> $GITHUB_ENV

        echo "GH_WORKSPACE=${{ github.workspace }}" >> $GITHUB_ENV # "/github/workspace"
      shell: bash

    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK
      uses: actions/setup-java@v3 
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'microsoft' # https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Microsoft
        cache: maven
    
    - name: Build with Maven
      id: mvn_build
      run: |
        pwd
        ls -al
        mvn -B clean package --file pom.xml -DskipTests -Denv=cloud
        echo "github.workspace = ${{ github.workspace }}"
        
        ls -al
        ls -al spring-petclinic-${{ env.ADMIN_SERVER }}/target/*.jar
        ls -al spring-petclinic-${{ env.API_GATEWAY }}/target/*.jar
        ls -al spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.VETS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.VISITS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.CONFIG_SERVER }}/target/*.jar
        # ls -al spring-petclinic-${{ env.DISCOVERY_SERVER }}/target/*.jar

    # https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages
    # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
    # To authenticate to a GitHub Packages registry within a GitHub Actions workflow, you can use
    # GITHUB_TOKEN to publish packages associated with the workflow repository.

    # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry
    # https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-maven#publishing-packages-to-github-packages
    # Publish the package
    # https://stackoverflow.com/questions/57711558/deploy-to-github-package-registry-from-github-action
    # https://github.com/marketplace/actions/generate-settings-xml-for-maven-builds
    # https://maven.apache.org/plugins/maven-deploy-plugin/deploy-mojo.html#altDeploymentRepository
    - name:  Publish the Maven package
      run: |
        mkdir -p ~/.m2
        echo "<settings><servers><server><id>github-aca</id><username>$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')</username><password>\${env.GITHUB_TOKEN}</password></server></servers></settings>" > ~/.m2/settings.xml
        REPO="github-aca::default::https://maven.pkg.github.com/${GITHUB_REPOSITORY}"
        mvn deploy -DaltReleaseDeploymentRepository="${REPO}" -DaltSnapshotDeploymentRepository="${REPO}" --batch-mode -DskipTests -Dmaven.install.skip=true

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Check all Jar artifacts
      run: |
        pwd
        ls -al

        echo "Checking all artifacts Jar files :"
        ls -al spring-petclinic-${{ env.ADMIN_SERVER }}/target/*.jar
        ls -al spring-petclinic-${{ env.API_GATEWAY }}/target/*.jar
        ls -al spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.VETS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.VISITS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.CONFIG_SERVER }}/target/*.jar
        # ls -al spring-petclinic-${{ env.DISCOVERY_SERVER }}/target/*.jar


    # https://github.com/marketplace/actions/docker-setup-buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.0.0

    - name: Azure Login
      uses: azure/login@v1.4.6 # https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ env.credentials }}

    - name: Build image and push it to ACR
      run: |

          # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
          echo "::set-output name=tag_id::{{.Run.ID}}"
          echo "Run.ID="{{.Run.ID}}
          echo "tag_id="$tag_id
          
          # https://github.com/cwe1ss/msa-template/blob/main/.github/workflows/_service-build.yml
          set -euo pipefail
          access_token=$(az account get-access-token --query accessToken -o tsv)
          refresh_token=$(curl https://${{ env.REGISTRY_URL }}/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.REGISTRY_URL }}&access_token=$access_token" | jq -r .refresh_token)
          docker login ${{ env.REGISTRY_URL }} -u 00000000-0000-0000-0000-000000000000 --password-stdin <<< "$refresh_token"

          acr_usr=$(az deployment group show -g ${{ env.RG_APP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query properties.outputs.acrRegistryUsr.value | tr -d '"')
          acr_pwd=$(az deployment group show -g ${{ env.RG_APP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query properties.outputs.acrRegistryPwd.value | tr -d '"')
          # az acr login --name ${{ env.REGISTRY_URL }} -u $acr_usr -p $acr_pwd
          
          az acr login --name ${{ env.REGISTRY_URL }} --expose-token

          az configure --defaults acr=${{ env.AZURE_CONTAINER_REGISTRY }}
          
          echo ""
          echo "Read https://learn.microsoft.com/en-us/azure/container-registry/container-registry-java-quickstart"
          echo "Read https://learn.microsoft.com/en-us/azure/container-registry/container-registry-authentication-managed-identity?tabs=azure-cli#example-2-access-with-a-system-assigned-identity"
          echo ""
          echo "/!\ Managed Identity is set on ACR ..."
          echo "you need to az login --identity, az acr login before calling az acr build ..."
          echo ""

          #az login --identity --username $identityID
          #--name ${{ env.AZURE_CONTAINER_REGISTRY }}
          az acr build --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g  ${{ env.RG_APP }} -t petclinic/adm-test:{{.Run.ID}} --file "./docker/petclinic-admin-server/Dockerfile" .

          # https://github.com/Azure/acr-build/issues/10
          # https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
          # GITHUB_RUN_ID: A unique number for each workflow run within a repository. This number does not change if you re-run the workflow run.
          
          #az acr build --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RG_APP }} \
          #  -t ${{ env.REPOSITORY }}/${{ env.ADMIN_SERVER }}:{{.Run.ID}} \
          #  --file "./docker/petclinic-admin-server/Dockerfile" \
          #  ${{ github.workspace }}

          build_id=$(az acr task list-runs --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -o json --query [0].name )    
          build_id=$(echo $build_id | tr -d '"')
          echo "Successfully pushed image with ID " $build_id
          # az acr task logs --registry ${{ env.AZURE_CONTAINER_REGISTRY }} --run-id $build_id

          # verify
          az acr repository list --name ${{ env.AZURE_CONTAINER_REGISTRY }} --output table
          az acr repository show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --repository ${{ env.REPOSITORY }}

    outputs:
      tag_id: ${{ steps.mvn_build.outputs.tag_id }}