# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

env:
  AZURE_CONTAINER_REGISTRY: acrpetcliaca # The name of the ACR, must be UNIQUE. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
  REGISTRY_URL: acrpetcliaca.azurecr.io  # set this to the URL of your registry
  REPOSITORY: petclinic                  # set this to your ACR repository
  PROJECT_NAME: petclinic                # set this to your project's name
  KV_NAME: kv-petcliaca442               # The name of the KV, must be UNIQUE. A vault name must be between 3-24 alphanumeric characters
  
  RG_KV: rg-iac-kv777 # RG where to deploy KV
  RG_APP: rg-iac-aca-petclinic-mic-srv # RG where to deploy the other Azure services: ACA, ACA Env., MySQL, etc.

  # ==== APPS ====
  PRJ_PREFIX: aca-spring-petclinic

  API_GATEWAY: api-gateway
  ADMIN_SERVER: admin-server
  CUSTOMERS_SERVICE: customers-service
  VETS_SERVICE: vets-service
  VISITS_SERVICE: visits-service

  CONFIG_SERVER: config-server
  DISCOVERY_SERVER: discovery-server

  # ==== Versions ====
  DEPLOYMENT_VERSION: 2.6.6
  AZ_CLI_VERSION: 2.40.0
  JAVA_VERSION: 11

  # https://github.com/Azure/actions-workflow-samples/blob/master/assets/create-secrets-for-GitHub-workflows.md#consume-secrets-in-your-workflow
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets
  # ==== Secrets ====
  credentials: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SPN_ID: ${{ secrets.SPN_ID }}
  SPN_PWD: ${{ secrets.SPN_PWD }}
  
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
on:
  workflow_call:
#    secrets:
#      registryUserName:
#        description: 'ACR User Name'
#        required: true
#      registryUserPassword:
#        description: 'ACR Password'
#        required: true
#    inputs:

  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
jobs:

  maven-build:
    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write    
    steps:

    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
    # /!\ IMPORTANT:  The step that creates or updates the environment variable does not have access to the new value, but all subsequent steps in a job will have access.
    - name: Set Base environment variables
      run: |
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV
        
        echo "API_GATEWAY_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "ADMIN_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "CONFIG_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VETS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VISITS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV

      shell: bash

    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK
      uses: actions/setup-java@v3 
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'microsoft' # https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Microsoft
        cache: maven
    
    - name: Build with Maven
      run: |
        pwd
        ls -al
        mvn -B clean package --file pom.xml -DskipTests -Denv=cloud
        echo "github.workspace = ${{ github.workspace }}"
        
        ls -al
        ls -al spring-petclinic-${{ env.ADMIN_SERVER }}/target/*.jar
        ls -al spring-petclinic-${{ env.API_GATEWAY }}/target/*.jar
        ls -al spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.VETS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.VISITS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.CONFIG_SERVER }}/target/*.jar
        ls -al spring-petclinic-${{ env.DISCOVERY_SERVER }}/target/*.jar

    # https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages
    # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
    # To authenticate to a GitHub Packages registry within a GitHub Actions workflow, you can use
    # GITHUB_TOKEN to publish packages associated with the workflow repository.

    # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry
    # https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-maven#publishing-packages-to-github-packages
    # Publish the package
    # https://stackoverflow.com/questions/57711558/deploy-to-github-package-registry-from-github-action
    # https://github.com/marketplace/actions/generate-settings-xml-for-maven-builds
    # https://maven.apache.org/plugins/maven-deploy-plugin/deploy-mojo.html#altDeploymentRepository
    - name:  Publish the Maven package
      run: |
        mkdir -p ~/.m2
        echo "<settings><servers><server><id>github-aca</id><username>$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')</username><password>\${env.GITHUB_TOKEN}</password></server></servers></settings>" > ~/.m2/settings.xml
        REPO="github-aca::default::https://maven.pkg.github.com/${GITHUB_REPOSITORY}"
        #mvn deploy -DaltReleaseDeploymentRepository="${REPO}" -DaltSnapshotDeploymentRepository="${REPO}" --batch-mode -DskipTests -Dmaven.install.skip=true

        # local copy would not be shared between Jobs
        # mvn org.apache.maven.plugins:maven-dependency-plugin:3.3.0:copy \
        # -Dartifact=org.springframework.samples.petclinic.client:spring-petclinic-customers-service:2.6.6:jar \
        # -DoutputDirectory=. \
        #  -s settings.xml

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
    # https://github.com/actions/upload-artifact
    # /!\ Artifacts allow you to persist data after a job has completed, and share that data with another job in the same workflow.
    - name: Archive ADMIN-SERVER Jar artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ env.ADMIN_SERVER }}
        path: ${{ github.workspace }}/${{ env.ADMIN_SERVER_JAR }}
        retention-days: 5

    - name: Archive CONFIG-SERVER Jar artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ env.CONFIG_SERVER }}
        path: ${{ github.workspace }}/${{ env.CONFIG_SERVER_JAR }}
        retention-days: 5

    - name: Archive DISCOVERY-SERVER Jar artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ env.DISCOVERY_SERVER }}
        path: ${{ github.workspace }}/${{ env.DISCOVERY_SERVER_JAR }}
        retention-days: 5

    - name: Archive API-GATEWAY Jar artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ env.API_GATEWAY }}
        path: ${{ github.workspace }}/${{ env.API_GATEWAY_JAR }}
        retention-days: 5

    - name: Archive CUSTOMERS-SERVICE Jar artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ env.CUSTOMERS_SERVICE }}
        path: ${{ github.workspace }}/${{ env.CUSTOMERS_SERVICE_JAR }}
        retention-days: 5

    - name: Archive VETS-SERVICE Jar artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ env.VETS_SERVICE }}
        path: ${{ github.workspace }}/${{ env.VETS_SERVICE_JAR }}
        retention-days: 5

    - name: Archive VISITS-SERVICE Jar artifacts
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ env.VISITS_SERVICE }}
        path: ${{ github.workspace }}/${{ env.VISITS_SERVICE_JAR }}
        retention-days: 5

  get-acr-creds:
    runs-on: ubuntu-latest

    steps:
    
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
    # /!\ IMPORTANT:  The step that creates or updates the environment variable does not have access to the new value, but all subsequent steps in a job will have access.
    - name: Set Base environment variables
      run: |
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV        
      shell: bash

    - name: Azure Login
      uses: azure/login@v1.4.6 # https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ env.credentials }}

    # Allow GH Runner to access KV
    # When Public access is disabled on KV, you need to add a network rule in the KV Firewall
    - name: Authorize local IP to access the Azure Key Vault
      uses: azure/CLI@v1
      with:
        azcliversion: ${{ env.AZ_CLI_VERSION }}
        inlineScript: |
          az keyvault network-rule add --ip-address $LOCAL_IP --name ${{ env.KV_NAME }} --only-show-errors
          sleep 10
          
    # https://github.com/Azure/get-keyvault-secrets Action is deprecated "REGISTRY-USR,REGISTRY-PWD" ${{ env.KV_NAME }}
    - name: Get ACR Credentials Secrets from Key Vault
      id: acr_creds
      uses: azure/CLI@v1
      with:
        azcliversion: ${{ env.AZ_CLI_VERSION }}
        inlineScript: |
          #acr_usr=$(az deployment group show -g ${{ env.RG_APP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query properties.outputs.acrRegistryUsr.value)
          #acr_pwd=$(az deployment group show -g ${{ env.RG_APP }} -n ${{ env.AZURE_CONTAINER_REGISTRY }} --query properties.outputs.acrRegistryPwd.value)
          
          acr_usr=$(az keyvault secret show -n REGISTRY-USR --vault-name ${{ env.KV_NAME }} --query value)
          acr_pwd=$(az keyvault secret show -n REGISTRY-PWD --vault-name ${{ env.KV_NAME }} --query value)

          echo "::set-output name=acr_usr::$acr_usr"
          echo "::set-output name=acr_pwd::$acr_pwd"

    - name: Disable local IP access to the Key Vault
      uses: azure/CLI@v1
      if: ${{ always() }}
      with:
        azcliversion: ${{ env.AZ_CLI_VERSION }}
        inlineScript: |
          az keyvault network-rule remove --ip-address $LOCAL_IP --name ${{ env.KV_NAME }} --only-show-errors

    # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
    outputs:
      acr_usr: ${{ steps.acr_creds.outputs.acr_usr }}
      acr_pwd: ${{ steps.acr_creds.outputs.acr_pwd }}

  acr-build:
    runs-on: ubuntu-latest
    needs: [get-acr-creds, maven-build] # https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#defining-prerequisite-jobs
    steps:
    
    # You can  download all artifacts in a workflow run by not specifying a name.
    # https://github.com/actions/download-artifact
    - name: Download ALL Jar artifacts
      uses: actions/download-artifact@v3.0.0

    - name: Display ALL Jar artifacts
      run: |
        pwd
        ls -al
        echo "Listing downloaded artifacts : "
        ls -al ${{ env.ADMIN_SERVER }}/spring-petclinic-${{ env.ADMIN_SERVER }}/target/*.jar
        ls -al ${{ env.API_GATEWAY }}/spring-petclinic-${{ env.API_GATEWAY }}/target/*.jar
        ls -al ${{ env.CUSTOMERS_SERVICE }}/spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/target/*.jar
        ls -al ${{ env.VETS_SERVICE }}/spring-petclinic-${{ env.VETS_SERVICE }}/target/*.jar
        ls -al ${{ env.VISITS_SERVICE }}/spring-petclinic-${{ env.VISITS_SERVICE }}/target/*.jar
        ls -al ${{ env.CONFIG_SERVER }}/spring-petclinic-${{ env.CONFIG_SERVER }}/target/*.jar
        # ls -al ${{ env.DISCOVERY_SERVER }}/spring-petclinic-${{ env.DISCOVERY_SERVER }}/target/*.jar

        # github.workspace = /home/runner/work/aca-java-petclinic-mic-srv/aca-java-petclinic-mic-srv
        echo "github.workspace = ${{ github.workspace }}" 
        # copy jar files at the root as expected by the Dockerfille
        cp ${{ env.ADMIN_SERVER }}/spring-petclinic-${{ env.ADMIN_SERVER }}/target/*.jar  ${{ github.workspace }}" 
        cp ${{ env.API_GATEWAY }}/spring-petclinic-${{ env.API_GATEWAY }}/target/*.jar  ${{ github.workspace }}" 
        cp ${{ env.CUSTOMERS_SERVICE }}/spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/target/*.jar  ${{ github.workspace }}" 
        cp ${{ env.VETS_SERVICE }}/spring-petclinic-${{ env.VETS_SERVICE }}/target/*.jar  ${{ github.workspace }}" 
        cp ${{ env.VISITS_SERVICE }}/spring-petclinic-${{ env.VISITS_SERVICE }}/target/*.jar  ${{ github.workspace }}" 
        cp ${{ env.CONFIG_SERVER }}/spring-petclinic-${{ env.CONFIG_SERVER }}/target/*.jar  ${{ github.workspace }}" 
        # cp ${{ env.DISCOVERY_SERVER }}/spring-petclinic-${{ env.DISCOVERY_SERVER }}/target/*.jar  ${{ github.workspace }}" 
        ls -al

        ls -al spring-petclinic-${{ env.ADMIN_SERVER }}/target/*.jar
        ls -al spring-petclinic-${{ env.API_GATEWAY }}/target/*.jar
        ls -al spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.VETS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.VISITS_SERVICE }}/target/*.jar
        ls -al spring-petclinic-${{ env.CONFIG_SERVER }}/target/*.jar
        # ls -al spring-petclinic-${{ env.DISCOVERY_SERVER }}/target/*.jar


    # https://github.com/marketplace/actions/azure-container-registry-login : Use this GitHub Action to log in to a private container registry such as Azure Container registry.
    #- name: Login to ACR
    #  uses: azure/docker-login@v1
    #  with:
    #    login-server: '${{ env.REGISTRY_URL }}' # default: index.docker.io
    #    username: ${{ env.SPN_ID }}
    #    password: ${{ env.SPN_PWD }}

    # https://github.com/marketplace/actions/docker-setup-buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.0.0


    # https://github.com/marketplace/actions/azure-container-registry-build
    - name: admin-server ACR build
      id: admin-server-acr-build
      uses: azure/acr-build@v1
      with:
        service_principal: ${{ env.SPN_ID }} # The Service Principal credentials : must be stored in KV
        service_principal_password: ${{ env.SPN_PWD }} # The Service Principal credentials: must be stored in KV
        tenant: ${{ env.AZURE_TENANT_ID }} # The ACR tenant
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }} # The ACR name
        repository: ${{ env.REPOSITORY }} # The repository on the ACR
        image: ${{ env.ADMIN_SERVER }} # Docker image name. Default tag: The action will default to use the first 8 characters of the commit SHA if no tag is specified. Tagged with GitHub commit ID (SHA), ex: 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'
        # git_access_token: ${{ secrets.git_access_token }} # The Github access token for private repositories
        folder: docker/ # Build context for Docker agent
        dockerfile: ./petclinic-admin-server/Dockerfile # Path to the Dockerfile relative to `folder`
        branch: main # Branch to root the context off of

    - name: config-server ACR build
      id: config-server-acr-build
      uses: azure/acr-build@v1
      with:
        service_principal: ${{ env.SPN_ID }}
        service_principal_password: ${{ env.SPN_PWD }}
        tenant: ${{ env.AZURE_TENANT_ID }}
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
        repository: ${{ env.REPOSITORY }}
        image: ${{ env.CONFIG_SERVER }}
        folder: docker/
        dockerfile: ./petclinic-config-server/Dockerfile
        branch: main

    - name: api-gateway ACR build
      id: api-gateway-acr-build
      uses: azure/acr-build@v1
      with:
        service_principal: ${{ env.SPN_ID }}
        service_principal_password: ${{ env.SPN_PWD }}
        tenant: ${{ env.AZURE_TENANT_ID }}
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
        repository: ${{ env.REPOSITORY }}
        image: ${{ env.API_GATEWAY }}
        folder: docker/
        dockerfile: ./petclinic-api-gateway/Dockerfile
        branch: main

    - name: customer-service ACR build
      id: customer-service-acr-build
      uses: azure/acr-build@v1
      with:
        service_principal: ${{ env.SPN_ID }}
        service_principal_password: ${{ env.SPN_PWD }}
        tenant: ${{ env.AZURE_TENANT_ID }}
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
        repository: ${{ env.REPOSITORY }}
        image: ${{ env.CUSTOMERS_SERVICE }}
        folder: docker/
        dockerfile: ./petclinic-customers-service/Dockerfile
        branch: main        

    - name: vets-service ACR build
      id: vets-service-acr-build
      uses: azure/acr-build@v1
      with:
        service_principal: ${{ env.SPN_ID }}
        service_principal_password: ${{ env.SPN_PWD }}
        tenant: ${{ env.AZURE_TENANT_ID }}
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
        repository: ${{ env.REPOSITORY }}
        image: ${{ env.VETS_SERVICE }}
        folder: docker/
        dockerfile: ./petclinic-vets-service/Dockerfile
        branch: main

    - name: visits-service ACR build
      id: visits-service-acr-build
      uses: azure/acr-build@v1
      with:
        service_principal: ${{ env.SPN_ID }}
        service_principal_password: ${{ env.SPN_PWD }}
        tenant: ${{ env.AZURE_TENANT_ID }}
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
        repository: ${{ env.REPOSITORY }}
        image: ${{ env.VISITS_SERVICE }}
        folder: docker/
        dockerfile: ./petclinic-visits-service/Dockerfile
        branch: main

    #- name: Build XXX image and push it to ACR
    #  uses: azure/CLI@v1.0.6 # https://github.com/marketplace/actions/azure-cli-action
    #  with:
    #    azcliversion: ${{ env.AZ_CLI_VERSION }}
    #    inlineScript: |
    #
    #      # tenantId=$(az account show --query tenantId -o tsv)
    #      # echo AZURE_TENANT_ID >> $GITHUB_ENV
    #
    #      az configure --defaults acr=${{ env.AZURE_CONTAINER_REGISTRY }}
    #      # az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
    #      az acr build -t ${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.PROJECT_NAME }} --file "./docker/petclinic-admin-server/Dockerfile"
    #      build_id=$(az acr task list-runs --registry $acr_registry_name -o json --query [0].name )
    #
    #      build_id=$(echo $build_id | tr -d '"')
    #      echo "Successfully pushed image with ID " $build_id
    #      az acr task logs --registry $acr_registry_name --run-id  $build_id
    #
    #      # verify
    #      az acr repository list  ${{ env.AZURE_CONTAINER_REGISTRY }} --output table
    #      az acr repository show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --repository ${{ env.PROJECT_NAME }}
    #
    #      mkdir deploy
    #      export CONTAINER_REGISTRY=${{ env.AZURE_CONTAINER_REGISTRY }}
    #      export IMAGE_TAG=$build_id